# Main Bash Magic Enviro manager
#
# This file is meant to be sourced, not run

# Style table
C_BOLD='\033[1m'         # Bold text
C_GREEN='\033[1;32m'     # Green (and bold)
C_YELLOW='\033[1;1;33m'  # Yellow (and bold)
C_RED='\033[1;31m'       # Red (and bold)
C_NC='\033[0m'           # No Color

# Sets 'fake' boolean
declare -i BOOL=(0 1)
false=${BOOL[0]}
true=${BOOL[1]}


#--
# FUNCTIONS
#--
# Main BME loader (it runs each time we change directory as per PROMPT_COMMAND)
bme_eval_dir() {
	if [ "$PWD" != "$MYOLDPWD" ]; then
		MYOLDPWD="$PWD"
		if [ -e .bme_env ]; then
			source .bme_env
			# PROJECT_NAME must be the first thing to be set!!!
			if [[ -z ${PROJECT_NAME+x} ]]; then
				echo -e "${C_RED}ERROR:${C_NC} You didn't ${C_BOLD}'export PROJECT_NAME=[current_project_name]'${C_NC}!"
				return -1
			elif [[ -z ${PROJECT_DIR+x} ]]; then
			# If PROJECT_DIR is not set, it's because we just entered a new project enviroment
				export PROJECT_DIR="$PWD"
				load_project
			fi
		fi
	# this conditional matches when we out of a project's root directory
		if [ "${PWD##$PROJECT_DIR}" == "$PWD" ] && [[ -n ${PROJECT_DIR+x} ]]; then
			clean_project
		fi
	fi
}


# Loads a project's configuration
load_project() {
local module
# A bit of debug: I need to know the place I'm stored, so I can find other includes, relative to me
# 	echo "See what follows: $0"
# 	echo "See what follows: $_"
# 	echo "See what follows: ${BASH_SOURCE}"  # This is the good one! ~/bin/bash-magic-enviro
# 	echo "See what follows: ${BASH_SOURCE[0]}"
# 	echo "See what follows: ${BASH_SOURCE[${#BASH_SOURCE[@]} - 1]}"
	echo -e "${C_GREEN}LOADING:${C_NC} project ${C_BOLD}'${PROJECT_NAME}'${C_NC} environment..."
	if [[ -n ${BME_MODULES+x} ]]; then
		for module in "${BME_MODULES[@]}"; do
			if [ -r "${BASH_SOURCE}_modules/${module}.module" ]; then
				source "${BASH_SOURCE}_modules/${module}.module"
				${module}_load
				ACTIVE_MODULES+="${module}"
			else
				echo -en "\t${C_YELLOW}WARNING:${C_NC} Couldn't find module ${C_BOLD}'${module}'${C_NC}. "
				echo -e "File ${C_BOLD}'${BASH_SOURCE}_modules/${module}.module'${C_NC} couldn't be found."
			fi
		done
	fi
	echo -e "Project ${C_BOLD}'${PROJECT_NAME}'${C_NC} ${C_GREEN}loaded!${C_NC}\n"
}


# Cleans project's environment
clean_project() {
	echo -en "${C_GREEN}CLEANING:${C_NC} "
	local project_name="${PROJECT_NAME}"
	
# Active modules
	if [[ -n ${ACTIVE_MODULES+x} ]]; then
		for module in "${ACTIVE_MODULES[@]}"; do
			${module}_unload
			unset -f ${module}_load
			unset -f ${module}_unload
		done
	fi
	unset ACTIVE_MODULES
	unset module
# Final clean
	unset PROJECT_NAME
	unset PROJECT_DIR
	unset BME_MODULES
	echo -e "Project ${C_BOLD}'${project_name}'${C_NC} ${C_GREEN}cleaned!${C_NC}"
}
