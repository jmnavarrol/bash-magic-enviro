# Main Bash Magic Enviro manager
#
# This file is meant to be sourced, not run
BME_VERSION='v0.1.0'

# Style table
C_BOLD='\033[1m'         # Bold text
C_GREEN='\033[1;32m'     # Green (and bold)
C_YELLOW='\033[1;1;33m'  # Yellow (and bold)
C_RED='\033[1;31m'       # Red (and bold)
C_NC='\033[0m'           # No Color

# Sets 'fake' boolean
declare -i BOOL=(0 1)
false=${BOOL[0]}
true=${BOOL[1]}


#--
# FUNCTIONS
#--
# Main BME loader (it runs each time we change directory as per PROMPT_COMMAND)
bme_eval_dir() {
	if [ "$PWD" != "$MYOLDPWD" ]; then
		MYOLDPWD="$PWD"
		if [ -e .bme_env ]; then
			source .bme_env
			# PROJECT_NAME must be the first thing to be set!!!
			if [[ -z ${PROJECT_NAME+x} ]]; then
				bme_log "You didn't set ${C_BOLD}'PROJECT_NAME=[your_project_name]'${C_NC} in your ${C_BOLD}'.bme_env'${C_NC} file." fatal
				return -1
			elif [[ -z ${PROJECT_DIR+x} ]]; then
			# If PROJECT_DIR is not set, it's because we just entered a new project enviroment
				export PROJECT_DIR="$PWD"
				load_project
			fi
		fi
	# this conditional matches when we out of a project's root directory
		if [ "${PWD##$PROJECT_DIR}" == "$PWD" ] && [[ -n ${PROJECT_DIR+x} ]]; then
			clean_project
		fi
	fi
}


# Logger function
# 1st param: 'log_message': the log message itself
# 2st param: 'log_type': log prefix, i.e.: ERROR, WARNING, empty string...
# 3st param: 'log_level': sets the indentation level of the log output, starting '0'
bme_log() {
local log_message="${1}"
local log_type="${2^^}"
local log_level=${3:-0}
local full_message=''
# Params debug
# 	echo "log_message: ${log_message}"
# 	echo "log_type: ${log_type}"
# 	echo "log_level: ${log_level}"

	if [ -z "$log_message" ]; then
		echo -e "${C_RED}FATAL:${C_NC} ${C_BOLD}'${FUNCNAME[0]}'${C_NC} called in code from ${C_BOLD}'${FUNCNAME[1]}'${C_NC} with no message."
		return -1
	fi
# Sets indentation level
	for (( i=0; i < ${log_level}; i++ )); do
		full_message+='\t'
	done
	unset i
# Then, message type
	case "$log_type" in
		FATAL | ERROR | FAIL)
			full_message+="${C_RED}${log_type}:${C_NC} "
		;;
		WARNING)
			full_message+="${C_YELLOW}${log_type}:${C_NC} "
		;;
		INFO \
		| LOADING | CLEANING \
		| OK)
			full_message+="${C_GREEN}${log_type}:${C_NC} "
		;;
		*)
			if [ -n "$log_type" ]; then
				full_message+="${C_BOLD}${log_type}:${C_NC} "
			fi
		;;
	esac
# Finally, the message itself
	full_message+="${log_message}"
	
	echo -e "${full_message}"
}


# Loads a project's configuration
load_project() {
# A bit of debug: I need to know the place I'm stored, so I can find other includes, relative to me
# 	echo "See what follows: $0"
# 	echo "See what follows: $_"
# 	echo "See what follows: ${BASH_SOURCE}"  # This is the good one! ~/bin/bash-magic-enviro
# 	echo "See what follows: ${BASH_SOURCE[0]}"
# 	echo "See what follows: ${BASH_SOURCE[${#BASH_SOURCE[@]} - 1]}"

	bme_log "project ${C_BOLD}'${PROJECT_NAME}'${C_NC} environment..." loading
	# Loads modules
	if [[ -n ${BME_MODULES+x} ]]; then
		for module in "${BME_MODULES[@]}"; do
			if [ -r "${BASH_SOURCE}_modules/${module}.module" ]; then
				source "${BASH_SOURCE}_modules/${module}.module"
				${module}_load
				ACTIVE_MODULES+=("${module}")
			else
				bme_log "Couldn't load ${C_BOLD}'${module}'${C_NC} module.\n\t\tFile ${C_BOLD}'${BASH_SOURCE}_modules/${module}.module'${C_NC} couldn't be found." warning 1
			fi
		done
		unset module
	fi
	# Checks for a valid custom clean function
	local custom_clean=`type -t bme_custom_clean`
	if [ -n "${custom_clean}" ] && [ "${custom_clean}" != 'function' ]; then
		bme_log "Custom clean object found, but it's not of type function: ${C_BOLD}'type -t bme_custom_clean: ${custom_clean}'${C_NC}." error 1
	fi
	bme_log "Project ${C_BOLD}'${PROJECT_NAME}'${C_NC} ${C_GREEN}loaded!${C_NC}\n"
	
# Finally, show a notice if 'check-version' module was requested
	IFS=$'\n'
		[[ "${ACTIVE_MODULES[@]}" =~ 'check-version' ]] && check-version
	unset IFS
}


# Cleans project's environment
clean_project() {
	local project_name="${PROJECT_NAME}"
	
# Custom clean (if any)
	local custom_clean=`type -t bme_custom_clean`
	if [ -n "${custom_clean}" ]; then
		if [ "${custom_clean}" == 'function' ]; then
			bme_custom_clean \
			&& bme_log "Custom clean function ended successfully" info 1 \
			|| bme_log "Custom clean function failed" error 1
			
			unset -f bme_custom_clean
		else
			bme_log "Custom clean object found, but it's not of type function: ${C_BOLD}'type -t bme_custom_clean: ${custom_clean}'${C_NC}." error 1
		fi
	fi
# Active modules
	if [[ -n ${ACTIVE_MODULES+x} ]]; then
		for module in "${ACTIVE_MODULES[@]}"; do
			${module}_unload
			unset -f ${module}_load
			unset -f ${module}_unload
		done
	fi
	unset ACTIVE_MODULES
	unset module
# Final clean
	unset PROJECT_NAME
	unset PROJECT_DIR
	unset BME_MODULES
	bme_log "Project ${C_BOLD}'${project_name}'${C_NC} ${C_GREEN}cleaned!${C_NC}" cleaning
}
