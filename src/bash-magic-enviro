# Main Bash Magic Enviro manager
#
# This file is meant to be sourced, not run
BME_REMOTE_GIT=<% REMOTE_GIT %>
BME_VERSION=<% VERSION %>
BME_PROJECT_FILE='.bme_project'
BME_FILE='.bme_env'
BME_HIDDEN_DIR='.bme.d'
BME_CONFIG_DIR="${HOME}/${BME_HIDDEN_DIR}"
BME_WHITELISTED_FILE="${BME_CONFIG_DIR}/whitelistedpaths"

# Style table
export C_BOLD='\033[1m'         # Bold text
export C_GREEN='\033[1;32m'     # Green (and bold)
export C_YELLOW='\033[1;1;33m'  # Yellow (and bold)
export C_RED='\033[1;31m'       # Red (and bold)
export C_NC='\033[0m'           # No Color

# Sets 'fake' boolean
declare -i BOOL=(0 1)
true=${BOOL[0]}
false=${BOOL[1]}

# DEBUG=$true

# See the one-off "pseudo-main" code at the end of this script

#--
# FUNCTIONS
#--
# Main BME loader (it runs each time we change directory as per PROMPT_COMMAND)
bme_eval_dir() {
	if [ "$PWD" != "$MYOLDPWD" ]; then
		MYOLDPWD="$PWD"
	# Find "nearest" project file climbing "upwards" the filesystem hierarchy
		local nearest_project_dir="$PWD"
		local project_found=false
		while [ "${nearest_project_dir}" ]; do
			__bme_debug && echo "${FUNCNAME[0]}: Looking for '${BME_PROJECT_FILE}' at '${nearest_project_dir}'."
			if [ -e "${nearest_project_dir}/${BME_PROJECT_FILE}" ]; then
			# Found "nearest" project file
				__bme_debug && echo "${FUNCNAME[0]}: Found project file at '${nearest_project_dir}'."
				__bme_load_project "${nearest_project_dir}" || return $?
				project_found=true
				break
			else
			# go one directory upwards and retry
				nearest_project_dir=$(dirname "${nearest_project_dir}")
				nearest_project_dir=${nearest_project_dir%/}  # in case returned dir ends in slash, delete it.
			fi
		done
		if ! $project_found && [[ -n ${BME_PROJECT_NAME+x} ]]; then
			# Still within a project context, but no project to load found in filesystem hierarchy.
			__bme_debug && echo "Project loop finished and no project found"
			__bme_clean_project
		fi
		
	# Reaching this point, a project should already be loaded, if any available.
	# Time to process 'bme_env' files, if any
		if [ -e ${BME_FILE} ]; then
			__bme_debug && echo "${BME_FILE} found at ${PWD}"
			if [[ -n ${BME_PROJECT_NAME+x} ]]; then
			# Already within a validated project context.
				source "${BME_FILE}"
			else
				local log_msg="${C_BOLD}'${BME_FILE}'${C_NC} file found, but no project root found.\n"
				log_msg+="\tReview your directory hierarchy leading to ${C_BOLD}'${PWD}'${C_NC}."
				bme_log "${log_msg}" error
				return -1
			fi
		fi
	fi
}


# A quick-set for debug messages
__bme_debug() {
	if [[ -n ${DEBUG} && $DEBUG == $true ]]; then
		return ${DEBUG}
	else
		return ${false}
	fi
}


# Logger function
# 1st param: 'log_message': the log message itself
# 2st param: 'log_type': log prefix, i.e.: ERROR, WARNING, empty string...
# 3st param: 'log_level': sets the indentation level of the log output, starting '0'
bme_log() {
local log_message="${1}"  # first param
local log_type="${2^^}"   # second param (uppercased)
local log_level=${3:-0}   # third param (with a default of 0)
local full_message=''
# Params debug
# 	echo "log_message: ${log_message}"
# 	echo "log_type: ${log_type}"
# 	echo "log_level: ${log_level}"

	# No parameters.  Show help instead
	if (( $# == 0 )); then
		local log_msg="'log message' ['log type' (see below)] [indentation level (0,1,2...)]"
		log_msg+="\n${C_BOLD}'log type'${C_NC} will add a colored prefix as shown below:"
		log_msg+="\n\t${C_GREEN}'INFO|OK|LOADING|CLEANING|FUNCTION'${C_NC}"
		log_msg+="\n\t${C_YELLOW}'WARNING'${C_NC}"
		log_msg+="\n\t${C_RED}'FATAL|ERROR|FAIL'${C_NC}"
		log_msg+="\n\t${C_BOLD}'any other log type'${C_NC}"
		log_msg+="\n${C_BOLD}Color codes you can use in your messages:${C_NC}"
		log_msg+="\n\t\"\${C_BOLD}${C_BOLD}'BOLD'${C_NC}\${C_NC}\""
		log_msg+="\n\t\"\${C_GREEN}${C_GREEN}'GREEN'${C_NC}\${C_NC}\""
		log_msg+="\n\t\"\${C_YELLOW}${C_YELLOW}'YELLOW'${C_NC}\${C_NC}\""
		log_msg+="\n\t\"\${C_RED}${C_RED}'RED'${C_NC}\${C_NC}\""
		bme_log "${log_msg}" ${FUNCNAME[0]}
		return 0
	fi
	
	# standard log message processing
	if [ -z "$log_message" ]; then
		echo -e "${C_RED}FATAL:${C_NC} ${C_BOLD}'${FUNCNAME[0]}'${C_NC} called in code from ${C_BOLD}'${FUNCNAME[1]}'${C_NC} with no message."
		return -1
	fi
# Sets indentation level
	for (( i=0; i < ${log_level}; i++ )); do
		full_message+='\t'
	done
	unset i
# Then, message type
	case "$log_type" in
		FATAL | ERROR | FAIL)
			full_message+="${C_RED}${log_type}:${C_NC} "
		;;
		WARNING)
			full_message+="${C_YELLOW}${log_type}:${C_NC} "
		;;
		INFO | OK \
		| LOADING | CLEANING \
		| FUNCTION)
			full_message+="${C_GREEN}${log_type}:${C_NC} "
		;;
		*)
			if [ -n "$log_type" ]; then
				full_message+="${C_BOLD}${log_type}:${C_NC} "
			fi
		;;
	esac
# Finally, the message itself
	full_message+="${log_message}"
	
	echo -e "${full_message}"
}
export -f bme_log


# BME version checker
bme_check_version() {
# Gets the sorted list of remote tags
	local remote_tags=(`git --git-dir "${BME_SRC_DIR}/.git" ls-remote --refs --tags --sort -version:refname ${BME_REMOTE_GIT} | cut --delimiter='/' --fields=3`)
# then, get the last one (which should be the highest by "version name").
	local highest_tag="${remote_tags[0]}"
	
# Shows version comparation results
	if [ "${BME_VERSION}" == "${highest_tag}" ]; then
		bme_log "${C_BOLD}'Bash Magic Enviro'${C_NC} is up to date: ${C_BOLD}'${BME_VERSION}'${C_NC}." info 0
	elif [[ " ${remote_tags[*]} " =~ " ${BME_VERSION} " ]]; then
	# Our current version is found in the list of remote tags but, since it's not the highest one, it must be lower
		local log_msg="New ${C_BOLD}'Bash Magic Enviro'${C_NC} version available.  Please, consider upgrading.\n"
			log_msg+="\tYour local version: ${C_BOLD}'${BME_VERSION}'${C_NC}.\n"
			log_msg+="\tHighest version at ${C_BOLD}'${BME_REMOTE_GIT}'${C_NC}: ${C_BOLD}'${highest_tag}'${C_NC}."
		bme_log "${log_msg}" info 0
	else
	# Weird: local version not found at remote
		local log_msg="Your current ${C_BOLD}'Bash Magic Enviro'${C_NC} version couldn't be found at your remote.\n"
			log_msg+="\tYour local version: ${C_BOLD}'${BME_VERSION}'${C_NC}.\n"
			log_msg+="\tHighest version at ${C_BOLD}'${BME_REMOTE_GIT}'${C_NC}: ${C_BOLD}'${highest_tag}'${C_NC}."
		bme_log "${log_msg}" warning 0
	fi
}
export -f bme_check_version


# Loads a project's configuration
# 1st param: 'project_dir': the directory to look for a project file
__bme_load_project() {
local project_dir="${1}"
# A bit of debug: I need to know the place I'm stored, so I can find other includes, relative to me
# 	echo "See what follows: $0"
# 	echo "See what follows: $_"
# 	echo "See what follows: ${BASH_SOURCE}"  # This is the good one! ~/bin/bash-magic-enviro
# 	echo "See what follows: ${BASH_SOURCE[0]}"
# 	echo "See what follows: ${BASH_SOURCE[${#BASH_SOURCE[@]} - 1]}"
# 	echo "See what follows: ${FUNCNAME[@]}"

# "pseudo private" function protection
	if [ "${FUNCNAME[1]}" != 'bme_eval_dir' ]; then
		bme_log "Function ${C_BOLD}'${FUNCNAME[0]}()'${C_NC} is ${C_BOLD}private${C_NC}.  You shouldn't invoke it!" error
		return -1
	fi
	
# Check if really there's a project file where requested
	if [ ! -r "${project_dir}/${BME_PROJECT_FILE}" ]; then
		bme_log "${FUNCNAME[0]}: No ${C_BOLD}'${BME_PROJECT_FILE}'${C_NC} found at ${C_BOLD}''${C_NC}." fatal
		return -1
	fi
	
# if $BME_PROJECT_NAME is defined, we are already within a "BME session"
	if [[ -n ${BME_PROJECT_NAME+x} ]]; then
		__bme_debug && echo "${FUNCNAME[0]}: ALREADY WITHIN A PROJECT ENVIRONMENT"
		local new_project=$(source "${project_dir}/${BME_PROJECT_FILE}" && echo "${BME_PROJECT_NAME}")
		if [[ -z "${new_project}" ]]; then
			bme_log "You didn't set ${C_BOLD}'BME_PROJECT_NAME=[your_project_name]'${C_NC} in your ${C_BOLD}'${BME_PROJECT_FILE}'${C_NC} file." error
			return -1
		fi
		
		if [ "${new_project}" != "${BME_PROJECT_NAME}" ]; then
		# New project: clean old one
			__bme_clean_project || return $?
		elif [ "${project_dir}" != "${BME_PROJECT_DIR}" ]; then
		# Weird: it seems we found the same project name at two different locations
			local log_msg="${C_BOLD}'${BME_PROJECT_NAME}'${C_NC} found at two different locations:\n"
			log_msg+="\t${C_BOLD}'${BME_PROJECT_DIR}'${C_NC} vs ${C_BOLD}'${project_dir}'${C_NC}.\n"
			log_msg+="Cleaning anyway."
			bme_log "${log_msg}" warning
			__bme_clean_project || return $?
		else
		# Still within same project; do nothing
			return 0
		fi
	fi
	
# If we reached here, it's time to load a new project
# Check project's whitelisting status
	if ! __bme_whitelist "${project_dir}"; then
		bme_log "${C_BOLD}'${BME_PROJECT_FILE}'${C_NC} file found at ${C_BOLD}'${project_dir}'${C_NC}, but load was rejected." fail
		return -1
	fi
	
# Load already validated project
	source "${project_dir}/${BME_PROJECT_FILE}" || return $?
	bme_log "project ${C_BOLD}'${BME_PROJECT_NAME}'${C_NC} environment..." loading
	
	export BME_PROJECT_DIR="${project_dir}"
	BME_ORIG_PATH=$PATH
	
	# Checks if current dir is within a git sandbox
	if git rev-parse --git-dir > /dev/null 2>&1; then
		BME_WITHIN_GIT=true
		# Checks .gitignore properties
		if ! git check-ignore -q "${BME_PROJECT_DIR}/${BME_HIDDEN_DIR}/"; then
			bme_log "${C_BOLD}'${BME_HIDDEN_DIR}/'${C_NC} is not in your ${C_BOLD}'.gitignore'${C_NC} file.  You should add it." warning 1
		fi
		if ! [[ -d ${BME_PROJECT_DIR}/${BME_HIDDEN_DIR} ]]; then
			bme_log "${C_BOLD}'${BME_PROJECT_DIR}/${BME_HIDDEN_DIR}/'${C_NC} directory requested, but not found." warning 1
			mkdir ${BME_PROJECT_DIR}/${BME_HIDDEN_DIR}
			bme_log "${C_BOLD}'${BME_PROJECT_DIR}/${BME_HIDDEN_DIR}/'${C_NC} created." info 1
		fi
	else
		BME_WITHIN_GIT=false
		bme_log "Directory ${C_BOLD}'${PWD}'${C_NC} is not within a git sandbox." info 1
	fi
	
	# Activates requested modules (if any)
	__bme_modules_load
	
	# Checks for a valid custom clean function
	local custom_clean=`type -t bme_custom_clean`
	if [ -n "${custom_clean}" ] && [ "${custom_clean}" != 'function' ]; then
		bme_log "Custom clean object found, but it's not of type function: ${C_BOLD}'type -t bme_custom_clean: ${custom_clean}'${C_NC}." error 1
	fi
	
	# Show notice if 'check-version' module was requested
	[[ "${ACTIVE_MODULES[@]}" =~ 'check-version' ]] && check-version
	
	bme_log "Project ${C_BOLD}'${BME_PROJECT_NAME}'${C_NC} loaded.\n" info
}


# Cleans project's environment
__bme_clean_project() {
# "pseudo private" function protection
local allowed_callers=('__bme_load_project' 'bme_eval_dir')
	if [[ ! " ${allowed_callers[*]} " =~ " ${FUNCNAME[1]} " ]]; then
		local log_msg="Function ${C_BOLD}'${FUNCNAME[0]}()'${C_NC} is ${C_BOLD}private${C_NC}.  You shouldn't invoke it!\n"
		log_msg+="\tUnexpectedly called from ${C_BOLD}'${FUNCNAME[1]}'${C_NC}."
		bme_log "${log_msg}" error
		return -1
	fi
	
	bme_log "Cleaning ${C_BOLD}'${BME_PROJECT_NAME}'${C_NC}..." cleaning
	local project_name="${BME_PROJECT_NAME}"
	
# Custom clean (if any)
	local custom_clean=`type -t bme_custom_clean`
	if [ -n "${custom_clean}" ]; then
		if [ "${custom_clean}" == 'function' ]; then
			bme_custom_clean \
			&& bme_log "Custom clean function ended successfully" info 1 \
			|| bme_log "Custom clean function failed" error 1
			
			unset -f bme_custom_clean
		else
			bme_log "Custom clean object found, but it's not of type function: ${C_BOLD}'type -t bme_custom_clean: ${custom_clean}'${C_NC}." error 1
		fi
	fi
# Unloads active modules
	__bme_modules_unload
# Restore path
	PATH=$BME_ORIG_PATH
	unset BME_ORIG_PATH
# Final clean
	unset BME_WITHIN_GIT
	unset BME_PROJECT_NAME
	unset BME_PROJECT_DIR
	unset BME_MODULES
	bme_log "Project ${C_BOLD}'${project_name}'${C_NC} cleaned." cleaning
}


# Whitelists projects
# 1st param: the directory to check for whitelisting
__bme_whitelist() {
local test_path="${1}"

# "pseudo private" function protection
local allowed_callers=('__bme_load_project')
	if [[ ! " ${allowed_callers[*]} " =~ " ${FUNCNAME[1]} " ]]; then
		local log_msg="Function ${C_BOLD}'${FUNCNAME[0]}()'${C_NC} is ${C_BOLD}private${C_NC}.  You shouldn't invoke it!\n"
		log_msg+="\tUnexpectedly called from ${C_BOLD}'${FUNCNAME[1]}'${C_NC}."
		bme_log "${log_msg}" error
		return -1
	fi
	
# Safe check: is this really a "project directory"?
	if ! [ -f "${test_path}/${BME_PROJECT_FILE}" ]; then
		local log_msg="${C_BOLD}'${FUNCNAME[0]}()'${C_NC} called from ${C_BOLD}'${FUNCNAME[1]}()'${C_NC}:\n"
		log_msg+="\twhitelisting status for ${C_BOLD}'${test_path}'${C_NC} requested, but no ${C_BOLD}${BME_PROJECT_FILE}${C_NC} file found at that place."
		bme_log "${log_msg}" fatal
		return -1
	fi
	
# Loops to find if it's an already known project directory
	if [[ -v BME_WHITELISTED_PATHS["${test_path}"] ]]; then
		__bme_debug && echo "${FUNCNAME[0]} called from ${FUNCNAME[1]}: exact match found:"
		__bme_debug && echo -e "\t'${test_path}' whitelist status is '${BME_WHITELISTED_PATHS[$test_path]}'."
		return ${!BME_WHITELISTED_PATHS[$test_path]}
	fi
	
# 	for dir in "${!BME_WHITELISTED_PATHS[@]}"; do
# 		if [ "$dir" == "${test_path}" ]; then
# 		# returns the true/false allowance value associated with this directory
# 			__bme_debug && echo "${FUNCNAME[0]} called from ${FUNCNAME[1]}: exact match for project dir."
# 			__bme_debug && echo -e "\t'${test_path}' belongs to '${dir}'."
# 			return ${!BME_WHITELISTED_PATHS[$dir]}
# 		fi
# 	done
	
# If we reached here, it's a new project directory
	bme_log "${C_BOLD}'${BME_PROJECT_FILE}'${C_NC} file found at ${C_BOLD}'${test_path}'${C_NC}." info
	# First, check if its name is valid
	local new_project=$(source "${test_path}/${BME_PROJECT_FILE}" && echo "${BME_PROJECT_NAME}")
	if [[ -z "${new_project}" ]]; then
		bme_log "You didn't set ${C_BOLD}'BME_PROJECT_NAME=[your_project_name]'${C_NC} in your ${C_BOLD}'${BME_PROJECT_FILE}'${C_NC} file." fatal
		return -1
	fi
	__bme_debug && echo "${FUNCNAME[0]}: New project name is '${new_project}'"
	__bme_check_project_name "${new_project}" || return $?
	
	echo -en '\tDo you want to whitelist this directory? [y/N]: '
	while true; do
		read -r REPLY
		REPLY="${REPLY:-N}"  # reply defaults to 'N'
		REPLY="${REPLY^^}"   # then, turn the answer into uppercase
		case "${REPLY}" in
			Y)
				BME_WHITELISTED_PATHS["${test_path}"]+=true
				bme_log "Directory ${C_BOLD}'${test_path}'${C_NC} whitelisted!" info
				break
			;;
			N)
				BME_WHITELISTED_PATHS["${test_path}"]+=false
				bme_log "Directory ${C_BOLD}'${test_path}'${C_NC} rejected!" warning
				break
			;;
			*)
				# these control codes "overwrite" de console line
				echo -en "\r\033[1A\033[0K${C_RED}\tOnly 'y' or 'n' allowed!${C_NC} Do you want to whitelist this directory? [y/N]: "
			;;
		esac
	done
	
	# finally, dump the new associative array to file and return the result
	echo "declare -gA BME_WHITELISTED_PATHS=(" > "${BME_WHITELISTED_FILE}"
		local dir
		for dir in "${!BME_WHITELISTED_PATHS[@]}"; do
			echo -e "\t[${dir}]=${BME_WHITELISTED_PATHS[$dir]}" >> "${BME_WHITELISTED_FILE}"
		done 
	echo ")" >> "${BME_WHITELISTED_FILE}"
	
	[ "$REPLY" == 'Y' ] && return $true || return $false
}


# Loads requested modules as per the BME_MODULES array
# 1st param: 'module' a single module to load into ACTIVE_MODULES array
__bme_modules_load() {
local module=$1

	if [[ ${module} ]]; then
		__bme_debug && echo "${FUNCNAME[0]}: MODULE PARAM PROVIDED: '${module}'"
		local module_list+=("${module}")
	else
		__bme_debug && echo "${FUNCNAME[0]}: MODULE PARAM **NOT** PROVIDED"
		if [[ -n ${BME_MODULES} ]]; then
			__bme_debug && echo "${FUNCNAME[0]}: THERE IS A GLOBAL LIST OF MODULES TO LOAD: '${BME_MODULES[@]}'"
			local module_list=("${BME_MODULES[@]}")
		else
			__bme_debug && echo "${FUNCNAME[0]}: THERE IS **NOT** A GLOBAL LIST OF MODULES TO LOAD"
			return 0
		fi
	fi
	
	__bme_debug && echo "${FUNCNAME[0]}: CURRENT LOAD MODULE LIST: '${module_list[@]}'"
	for module in "${module_list[@]}"; do
		if [[ ! " ${ACTIVE_MODULES[*]} " =~ " ${module} " ]]; then
			__bme_debug && echo "${FUNCNAME[0]}: ABOUT TO LOAD MODULE '${module}'"
			if [ -r "${BASH_SOURCE}_modules/${module}.module" ]; then
				source "${BASH_SOURCE}_modules/${module}.module"
				${module}_load && ACTIVE_MODULES+=("${module}")
			else
				local log_msg="Couldn't load ${C_BOLD}'${module}'${C_NC} module.\n"
					log_msg+="\t\tFile ${C_BOLD}'${BASH_SOURCE}_modules/${module}.module'${C_NC} couldn't be found."
				bme_log "${log_msg}" warning 1
			fi
		else
			__bme_debug && echo "${FUNCNAME[0]}: MODULE '${module}' ALREADY LOADED. SKIPPING"
		fi
	done
	__bme_debug && echo "${FUNCNAME[0]}: CURRENT LIST OF LOADED MODULES: '${ACTIVE_MODULES[@]}'"
}


# Unloads modules as per the ACTIVE_MODULES array
__bme_modules_unload() {
	if [[ -n ${ACTIVE_MODULES+x} ]]; then
		# List of active modules is processed in reverse order for deactivation, in case there are sorting dependencies
		# See https://stackoverflow.com/a/13360181/12237334 (hopefully this array will NOT have "holes" within)
		__bme_debug && echo "${FUNCNAME[0]}: CURRENT LIST OF MODULES TO UNLOAD: '${ACTIVE_MODULES[@]}'"
		for (( module=${#ACTIVE_MODULES[@]}-1; module>=0; module-- )); do
			${ACTIVE_MODULES[module]}_unload
			unset -f ${ACTIVE_MODULES[module]}_load
			unset -f ${ACTIVE_MODULES[module]}_unload
		done
	fi
	unset module
	unset ACTIVE_MODULES
}


# Checks project name (since it'll become a variable name)
# 1st param: 'project_name': the project name to validate
__bme_check_project_name() {
local project_name=$1
local bad_name=false

local allowed_callers=('__bme_whitelist')
	if [[ ! " ${allowed_callers[*]} " =~ " ${FUNCNAME[1]} " ]]; then
		local log_msg="Function ${C_BOLD}'${FUNCNAME[0]}()'${C_NC} is ${C_BOLD}private${C_NC}.  You shouldn't invoke it!\n"
		log_msg+="\tUnexpectedly called from ${C_BOLD}'${FUNCNAME[1]}'${C_NC}."
		bme_log "${log_msg}" error
		return -1
	fi
	
# Check for params
	if [[ -z "${project_name}" ]]; then
		local caller_data=`caller 0`
		local log_msg="${C_RED}(INTERNAL ERROR)${C_NC} Function ${C_BOLD}'${FUNCNAME[0]}'${C_NC} didn't get expected parameter ${C_BOLD}'project_name'${C_NC}.\n"
		log_msg+="\t${C_BOLD} FROM:${C_NC} ${caller_data}"
		bme_log "${log_msg}" fatal
		return -1
	fi
	
# There's a project name.  Now: is it valid?
# As per https://unix.stackexchange.com/questions/23659/can-shell-variable-name-include-a-hyphen-or-dash/23714
# A single "token" with only ASCII letters, numbers and underscore, and it can't start with a number
	# the project name should consist only on alnum or underscores
	local re="^([[:alnum:]]|_)+$"
	if [[ ! ${project_name} =~ $re ]]; then
		bme_log "${C_BOLD}'${project_name}'${C_NC} should only consist in alnum or underscores." fatal
		bad_name=true
	fi
	# the project name can't start with a number
	re="^[[:digit:]]"
	if [[ ${project_name} =~ $re ]]; then
		bme_log "${C_BOLD}'${project_name}'${C_NC} shouldn't start with a number." fatal
		bad_name=true
	fi
	
# exit on error
	if ($bad_name); then
		bme_log "${C_BOLD}'BME_PROJECT_NAME'${C_NC} should be a valid name (see above)." fatal
		return -1
	fi
}



#--
# MAIN
# this is meant to be run just once, when this file is sourced
#--
# First time configuration
if ! [ -d "${BME_CONFIG_DIR}" ]; then
	bme_log "${C_BOLD}'${BME_CONFIG_DIR}'${C_NC} directory doesn't exist.  Creating it" info
	mkdir -p "${BME_CONFIG_DIR}" || return $?
fi
if ! [ -e "${BME_WHITELISTED_FILE}" ]; then
# Creates an "empty" white list if it didn't yet exist
	echo -e "declare -gA BME_WHITELISTED_PATHS=(\n)" > "${BME_WHITELISTED_FILE}"
fi
source "${BME_WHITELISTED_FILE}"
