# Meant to be sourced by 'Bash Magic Enviro'
# Adds support for Terraform features

# Load module pre-dependencies
__bme_modules_load 'bindir'

terraform-support_load() {
local tfenv_repo='https://github.com/tfutils/tfenv.git'
local tfenv_version='v3.0.0'
local unmet_dependencies=false

	# 'terraform-support' depends on 'bindir'
	if ! [[ "${BME_ACTIVE_MODULES[@]}" =~ 'bindir' ]]; then
		local log_msg="${C_BOLD}'terraform-support'${C_NC} depends on ${C_BOLD}'bindir'${C_NC} module, which is not active.\n"
		log_msg+="\t\tPlease, activate ${C_BOLD}'bindir'${C_NC} in your configuration ${C_BOLD}BEFORE${C_NC} this one."
		bme_log "${log_msg}" error 1
		unmet_dependencies=true
	fi
	
	# checks '.gitignore' contents
	if ($BME_WITHIN_GIT); then
		for tfenv_ignore in "${BME_PROJECT_DIR}/bin/tfenv" "${BME_PROJECT_DIR}/bin/terraform"; do
			if ! git check-ignore -q ${tfenv_ignore}; then
				bme_log "${C_BOLD}'${tfenv_ignore}'${C_NC} is not in your '.gitignore' file.  You should add it." error 1
				unmet_dependencies=true
			fi
		done
		unset tfenv_ignore
	fi
	
	# makes sure tfenv repo is in place
	if [ -d ${BME_PROJECT_DIR}/${BME_HIDDEN_DIR}/tfenv ]; then
	# Already cloned: check version in case we need to update
		# this below happens in a subshell
		(
			cd ${BME_PROJECT_DIR}/${BME_HIDDEN_DIR}/tfenv && current_tfenv_version=`git describe --tags`
			if [ "${tfenv_version}" != "${current_tfenv_version}" ]; then
				local bme_msg="About to update ${C_BOLD}'tfenv'${C_NC}: "
				bme_msg+="${C_BOLD}'${current_tfenv_version}'${C_NC} -> ${C_BOLD}'${tfenv_version}'${C_NC}"
				bme_log "${bme_msg}" warning 1
				
				cd ${BME_PROJECT_DIR}/${BME_HIDDEN_DIR} && rm -rf tfenv/
			fi
		)
	fi
	
	# no: it's not an 'else' because we may have deleted the repo above
	if ! [ -d ${BME_PROJECT_DIR}/${BME_HIDDEN_DIR}/tfenv ]; then
	# About to clone tfenv repo
		bme_log "${C_BOLD}'tfenv'${C_NC} repository not found: cloning it." warning 1
		if ! git clone --depth 1 --branch ${tfenv_version} ${tfenv_repo} "${BME_PROJECT_DIR}/${BME_HIDDEN_DIR}/tfenv"; then
			bme_log "While cloning repository (see above): ${C_BOLD}'${tfenv_repo}' ('${tfenv_version}')${C_NC}." error 1
			unmet_dependencies=true
		fi
	fi
	
	# Creating tfenv-related symlinks
	for tfenv_link in 'bin/tfenv' 'bin/terraform'; do
		if ! [[ -L ${BME_PROJECT_DIR}/${tfenv_link} ]]; then
			# make sure this symlink is relative to the project's root dir
			(
				cd ${BME_PROJECT_DIR}/bin && rm -rf "${tfenv_link}"  # just in case
				ln -s ../${BME_HIDDEN_DIR}/tfenv/${tfenv_link}
				bme_log "Symlink ${C_BOLD}'${tfenv_link}'${C_NC} created." info 1
			)
		fi
	done
	unset tfenv_link
	# ...trying to cope with a tfenv limitation.  See https://github.com/tfutils/tfenv/issues/367
	# If TFENV_TERRAFORM_VERSION is defined and non-empty, just let it as-is.
	# If TFENV_TERRAFORM_VERSION undefined or empty, set it to 'min-required', since this will make it work (while not optimally).
	if [ -z ${TFENV_TERRAFORM_VERSION+x} ]; then
		bme_log "${C_BOLD}'TFENV_TERRAFORM_VERSION'${C_NC} environment variable is not set.  Setting it to ${C_BOLD}'min-required'${C_NC} by default." info 1
		export TFENV_TERRAFORM_VERSION=min-required
	fi
	
	# Project-level plugins dir
	if ! [ -d "${BME_PROJECT_DIR}/${BME_HIDDEN_DIR}/.terraform.d/plugin-cache" ]; then
		mkdir -p "${BME_PROJECT_DIR}/${BME_HIDDEN_DIR}/.terraform.d/plugin-cache"
		bme_log "Project's Terraform plugins cache dir created: ${C_BOLD}'${BME_PROJECT_DIR}/${BME_HIDDEN_DIR}/.terraform.d/plugin-cache'${C_NC}." info 1
	fi
	
# Final message
	if ($unmet_dependencies); then
		terraform-support_unload
		bme_log "${C_BOLD}'terraform-support'${C_NC} not loaded. See missed dependencies above." error 1
		return -1
	else
		export TF_PLUGIN_CACHE_DIR="${BME_PROJECT_DIR}/${BME_HIDDEN_DIR}/.terraform.d/plugin-cache"
		bme_log "${C_BOLD}'terraform-support'${C_NC} loaded." info 1
	fi
}


terraform-support_unload() {
	unset TFENV_TERRAFORM_VERSION
	unset TF_PLUGIN_CACHE_DIR
}
