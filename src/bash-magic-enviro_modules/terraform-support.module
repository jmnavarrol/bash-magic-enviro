# Meant to be sourced by 'magic-enviro'
# Adds support for Terraform features

terraform-support_load() {
local tfenv_repo='git@github.com:tfutils/tfenv.git'
local tfenv_version='v2.2.2'

	# 'terraform-support' depends on 'bindir'
	if ! [[ "${ACTIVE_MODULES[@]}" =~ 'bindir' ]]; then
		local log_msg="${C_BOLD}'terraform-support'${C_NC} not loaded.\n"
		log_msg+="\t\t${C_BOLD}'terraform-support'${C_NC} depends on ${C_BOLD}'bindir'${C_NC} module, which is not active.\n"
		log_msg+="\t\tPlease, activate ${C_BOLD}'bindir'${C_NC} in your configuration ${C_BOLD}BEFORE${C_NC} this one."
		bme_log "${log_msg}" error 1
		return -1
	fi
	
	# checks '.gitignore' contents
	if ($BME_WITHIN_GIT); then
		for tfenv_ignore in 'bin/tfenv' 'bin/terraform'; do
			if ! git check-ignore -q ${tfenv_ignore}; then
				local log_msg="${C_BOLD}'terraform-support'${C_NC} not loaded.\n"
				log_msg+="\t\t${C_BOLD}'${tfenv_ignore}'${C_NC} is not in your '.gitignore' file.  You should add it."
				bme_log "${log_msg}" error 1
				unset tfenv_ignore
				return -1
			fi
		done
		unset tfenv_ignore
	fi
	
	# makes sure tfenv repo is in place
	if [ -d ${PROJECT_DIR}/${BME_HIDDEN_DIR}/tfenv ]; then
	# Already cloned: check version in case we need to update
		# this below happens in a subshell
		(
			cd ${PROJECT_DIR}/${BME_HIDDEN_DIR}/tfenv \
			&& current_tfenv_version=`git describe --tags`
			if [ "${tfenv_version}" != "${current_tfenv_version}" ]; then
				local bme_msg="About to update ${C_BOLD}'tfenv'${C_NC}: "
				bme_msg+="${C_BOLD}'${current_tfenv_version}'${C_NC} -> ${C_BOLD}'${tfenv_version}'${C_NC}"
				bme_log "${bme_msg}" warning 1
				
				cd ${PROJECT_DIR}/${BME_HIDDEN_DIR} && rm -rf tfenv/
			fi
		)
	fi
	# no: it's not an 'else' because we may have deleted the repo above
	if ! [ -d ${PROJECT_DIR}/${BME_HIDDEN_DIR}/tfenv ]; then
	# About to clone tfenv repo
		bme_log "${C_BOLD}'tfenv'${C_NC} repository not found: cloning it." warning 1
		if ! git clone --depth 1 --branch ${tfenv_version} ${tfenv_repo} "${PROJECT_DIR}/${BME_HIDDEN_DIR}/tfenv"; then
			local log_msg="${C_BOLD}'terraform-support'${C_NC} not loaded.\n"
			log_msg+="\t\tError while cloning repository (see above): ${C_BOLD}'${tfenv_repo}' ('${tfenv_version}')${C_NC}."
			bme_log "${log_msg}" error 1
			return -1
		fi
	fi
	
	# Creating tfenv-related symlinks
	for tfenv_link in 'bin/tfenv' 'bin/terraform'; do
		if ! [[ -L ${PROJECT_DIR}/${tfenv_link} ]]; then
			# make sure this symlink is relative to the project's root dir
			(
				cd ${PROJECT_DIR}/bin && rm -rf "${tfenv_link}"  # just in case
				ln -s ../${BME_HIDDEN_DIR}/tfenv/${tfenv_link}
				bme_log "Symlink ${C_BOLD}'${tfenv_link}'${C_NC} created." info 1
			)
		fi
	done
	unset tfenv_link
	# ...trying to control tfenv bug. See https://github.com/tfutils/tfenv/issues/245
	if [ -n "${TFENV_TERRAFORM_VERSION+x}" ] && ! tfenv list > /dev/null 2>&1; then
		tfenv install
	fi
	
	# Project-level plugins dir
	if ! [ -d "${PROJECT_DIR}/${BME_HIDDEN_DIR}/.terraform.d/plugin-cache" ]; then
		mkdir -p "${PROJECT_DIR}/${BME_HIDDEN_DIR}/.terraform.d/plugin-cache"
		bme_log "Project's Terraform plugins cache dir created: ${C_BOLD}'${PROJECT_DIR}/${BME_HIDDEN_DIR}/.terraform.d/plugin-cache'${C_NC}." info 1
	fi
	export TF_PLUGIN_CACHE_DIR="${PROJECT_DIR}/${BME_HIDDEN_DIR}/.terraform.d/plugin-cache"
	
	bme_log "${C_BOLD}'terraform-support'${C_NC} loaded." info 1
}


terraform-support_unload() {
	unset TFENV_TERRAFORM_VERSION
	unset TF_PLUGIN_CACHE_DIR
}
