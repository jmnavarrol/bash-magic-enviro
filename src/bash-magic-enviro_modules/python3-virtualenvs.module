# Meant to be sourced by 'Bash Magic Enviro'
# Adds support for Python3 virtualenvs
#
# This module creates/loads a named virtualenv "populating" with a configuration-by-convention requirements file.
# The requirements file is expected to be found at ${virtualenvs_requirements}/${requested_virtualenv}.requirements.
# It also stores the requirements file's md5sum in a user-global fashion,
# so it can regenerate the virtualenv when the md5sum doesn't match.

virtualenvs_requirements="${BME_PROJECT_DIR}/python-virtualenvs"
# Project-restricted locking, md5sums and virtualenvs storage.
virtualenvs_md5sums="${BME_PROJECT_CONFIG_DIR}/python-virtualenvs.md5"
virtualenvs_lockfile="${BME_PROJECT_CONFIG_DIR}/python-virtualenvs.lockfile"
virtualenvs_path="${BME_PROJECT_CONFIG_DIR}/.virtualenvs"

python3-virtualenvs_load() {
local unmet_dependencies=false

# Checks Python3 availability
	if [ -n "${BME_PYTHON3_CMD}" ]; then
	# explicit python3 cmd requested.  Check it
		if python_version=$(${BME_PYTHON3_CMD} --version 2>&1); then
			bme_log "explicit Python3 cmd requested: ${C_BOLD}'${python_version}'${C_NC}" ok 1
		else
			bme_log "wrong python3 cmd requested: ${C_BOLD}'${BME_PYTHON3_CMD}'${C_NC}" fail 1
			unmet_dependencies=true
		fi
	else
	# no explicit python3 cmd requested.  Let's find a suitable one
		if python_version=$(python3 --version 2>&1); then
			export BME_PYTHON3_CMD=`which python3`
		elif python_version=$(python --version 2>&1); then
			export BME_PYTHON3_CMD=`which python`
		else
			bme_log "${C_BOLD}no suitable Python3 found.${C_NC}" fail 1
			unmet_dependencies=true
		fi
	fi

# Makes sure virtualenvs' directory for requirements files is in place
	if ! [[ -d "${virtualenvs_requirements}" ]]; then
		if mkdir --parents "${virtualenvs_requirements}/"; then
			bme_log "${C_BOLD}'${virtualenvs_requirements}/'${C_NC} created." info 1
		else
			local mkdir_rc=$?
			bme_log "Couldn't create ${C_BOLD}'${virtualenvs_requirements}/'${C_NC} (${mkdir_rc})" error 1
			unmet_dependencies=true
		fi
	fi

# Makes sure virtualenvs' md5sum file is in place
	if [ ! -r "${virtualenvs_md5sums}" ]; then
		if touch "${virtualenvs_md5sums}"; then
			bme_log "File ${C_BOLD}'${virtualenvs_md5sums}'${C_NC} created." info 1
		else
			bme_log "Couldn't touch ${C_BOLD}'${virtualenvs_md5sums}'${C_NC}" error 1
			unmet_dependencies=true
		fi
	fi

# Final message
	if ($unmet_dependencies); then
		python3-virtualenvs_unload
		bme_log "${C_BOLD}'python3-virtualenvs'${C_NC} not loaded. See missed dependencies above." error 1
		return 1
	else
		local log_msg="${C_BOLD}'python3-virtualenvs'${C_NC} loaded."
		log_msg+="\n\t\tUsing ${C_BOLD}'${BME_PYTHON3_CMD}' (${python_version})${C_NC}"
		bme_log "${log_msg}" info 1
		bme_log "${C_BOLD}load_virtualenv 'venv_name'${C_NC} - Loads the Python virtualenv by name ${C_BOLD}'venv_name'${C_NC}." function 2
	fi
	unset python_version
}


python3-virtualenvs_unload() {
	unset -f load_virtualenv
	unset BME_PYTHON3_CMD
	unset virtualenvs_requirements
	unset virtualenvs_md5sums
	unset virtualenvs_lockfile
	unset virtualenvs_path
	unset -f __create_python_virtualenv
	unset -f __check_requirements_includes
}


load_virtualenv() {
local requested_virtualenv="${1}"
local with_requests="${2:-}"

# Check params
	if [ -z "${requested_virtualenv}" ]; then
		bme_log "${C_BOLD}${FUNCNAME}:${C_NC} mandatory param ${C_BOLD}'venv_name'${C_NC} not set." error
		return 1
	fi
	if [ -n "${with_requests}" ]; then
	# Unconditionally update "central" requirements file with the proposed one
	# if that means changes to the virtualenv, we'll deal with it later on
		bme_log "got a requests file: ${C_BOLD}'${with_requests}'${C_NC}" info
		if [ -r "${with_requests}" ]; then
			cat "${with_requests}" > "${virtualenvs_requirements}/${requested_virtualenv}.requirements"
		else
			bme_log "Couldn't read requests file at ${C_BOLD}'${with_requests}'${C_BOLD}." error
			return 1
		fi
	fi

# Checks the requirements file's md5sum
	# running in a subshell so I can securely change directories
	# the idea is to populate ${venv_outdated} **only** if the virtualenv needs to be regenerated.
	local venv_outdated=$(
		cd "${virtualenvs_requirements}"
		if ! grep " ${requested_virtualenv}.requirements$" "${virtualenvs_md5sums}" | md5sum --check --status > /dev/null 2>&1; then
			bme_log "Virtualenv ${C_BOLD}'${requested_virtualenv}'${C_NC} outdated." warning
		fi
	)

# if $venv_outdated is empty, the main virtualenv is up to date.
# but it can point to includes that we should consider
# 	if [ -z "${venv_outdated}" ]; then
# 		venv_outdated=$(__check_requirements_includes "${requested_virtualenv}")
# 	fi

# if $venv_outdated holds output, it's because stored md5sum for the associated requirements file doesn't match
	if [ -n "${venv_outdated}" ]; then
		bme_log "${C_BOLD}'${requested_virtualenv}'${C_NC} virtualenv outdated or non existent." info
	# deactivates virtualenv (if any active and just in case)
		[ "$VIRTUAL_ENV" ] && deactivate
		rm --recursive --force "${virtualenvs_path}/${requested_virtualenv}" || return $?
# 		rmvirtualenv "${requested_virtualenv}"
	fi

# if requested virtualenv still exists, activate it, unless already so
	if ls "${virtualenvs_path}/${requested_virtualenv}" &> /dev/null; then
		if [[ `basename "${VIRTUAL_ENV}"` != "${requested_virtualenv}" ]]; then
			source "${virtualenvs_path}/${requested_virtualenv}/bin/activate" \
			|| return $?
			bme_log "${C_BOLD}'${requested_virtualenv}'${C_NC} virtualenv activated." info
		fi
# 	if lsvirtualenv -b | grep -q ^${requested_virtualenv}$; then
# 		if [[ `basename "${VIRTUAL_ENV}"` != "${requested_virtualenv}" ]]; then
# 			workon ${requested_virtualenv}
# 			bme_log "${C_BOLD}'${requested_virtualenv}'${C_NC} virtualenv activated." info
# 		fi
	else
	# ...or create it otherwise
		bme_log "Virtualenv ${C_BOLD}'${requested_virtualenv}'${C_NC} doesn't exist.  About to create it." info
		__create_python_virtualenv "${requested_virtualenv}" || return $?
# 		__create_python_virtualenv "${requested_virtualenv}" && workon "${requested_virtualenv}" || return $?
	fi
}


# Creates a virtualenv by name
__create_python_virtualenv() {
local requested_virtualenv="${1}"
local requirements_file="${virtualenvs_requirements}/${requested_virtualenv}.requirements"

# "pseudo private" function protection
	if [ "${FUNCNAME[1]}" != 'load_virtualenv' ]; then
		bme_log "Function ${C_BOLD}'${FUNCNAME[0]}()'${C_NC} is ${C_BOLD}private${C_NC}.  You shouldn't invoke it!" error
		return 1
	fi

# tries to acquire a lock
	(
		if flock -n 100; then
			if ! [ -r "${requirements_file}" ]; then
			# not even a requirements file! let's create an empty one
				bme_log "Requirements file for virtualenv ${C_BOLD}'${requirements_file}'${C_NC} doesn't exist. Creating empty virtualenv." warning 1
				touch "${requirements_file}"
			fi

			# virtualenv creation
			local virtualenv_error=false
			# requirements file format can be picky about pip version.
			# when pip is referenced in requirements file, let's create the virtualenv in three steps:
			# 1. empty virtualenv
			# 2. install requested pip
			# 3. everything else
			local pip_found=$(
				# this first grep strips comments
				grep --only-matching '^[^#]*' "${requirements_file}" | \
				# this second one finds pip entries: '~|=|<|>' is the list of valid version-specifier characters
				grep --ignore-case --extended-regexp '^pip[[:space:]]*((~|=|<|>)|$)'
			)
			if [ ! -z "${pip_found}" ]; then
			# custom pip found in the requirements file
				bme_log "Custom pip version requested." info 1
				# 1. "empty" virtualenv (it also activates it)
				"${BME_PYTHON3_CMD}" -m venv "${virtualenvs_path}/${requested_virtualenv}" || return $?
				source "${virtualenvs_path}/${requested_virtualenv}/bin/activate" || return $?
# 				mkvirtualenv --python=${BME_PYTHON_VERSION} ${requested_virtualenv} || virtualenv_error=true

				# 2. install pip
				pip install "${pip_found}" || return $?
# 				pip install "${pip_found}" || virtualenv_error=true
				# 3. install the full requirements file
				pip install --requirement "${requirements_file}" || return $?
# 				pip install -r "${virtualenvs_requirements}/${requested_virtualenv}.requirements" || virtualenv_error=true
			else
			# no custom pip version: "standard" virtualenv creation
				"${BME_PYTHON3_CMD}" -m venv "${virtualenvs_path}/${requested_virtualenv}" || return $?

				source "${virtualenvs_path}/${requested_virtualenv}/bin/activate" || return $?

				pip install --requirement "${requirements_file}" || return $?
# 				mkvirtualenv --python=${BME_PYTHON_VERSION} ${requested_virtualenv} -r "${virtualenvs_requirements}/${requested_virtualenv}.requirements" || virtualenv_error=true
			fi

			if ($virtualenv_error); then
				bme_log "${C_BOLD}'${requested_virtualenv}'${C_NC} creation FAILED (see above)." error
				return 1
			else
				# running in a subshell so I securely can change directories
				(
					cd "${virtualenvs_requirements}"
				# Updates the 'main' requirements md5sum
					if ! grep " ${requested_virtualenv}.requirements$" "${virtualenvs_md5sums}" | md5sum --check --status > /dev/null 2>&1; then
						sed --in-place "/ ${requested_virtualenv}.requirements/d" ${virtualenvs_md5sums}
						md5sum "${requested_virtualenv}.requirements" >> "${virtualenvs_md5sums}"
						bme_log "md5sum for ${C_BOLD}'${requested_virtualenv}'${C_NC} virtualenv collected." info 1
					fi
# 				# But there can also be references to included requirements
# 					__check_requirements_includes "${requested_virtualenv}" true
				)
				bme_log "${C_BOLD}'${requested_virtualenv}'${C_NC} virtualenv created." info
			fi
		else
			local log_msg="Couldn't grab a lock while trying to create ${C_BOLD}'${requested_virtualenv}'${C_NC} python virtualenv.\n"
			log_msg+="\tPlease make sure there's no other process creating a virtualenv within this project right now."
			bme_log "${log_msg}" error
			return 1
		fi
	) 100>"${virtualenvs_lockfile}"

# Final virtualenv (re)activation
	source "${virtualenvs_path}/${requested_virtualenv}/bin/activate" || return $?
}


# Looks for includes in a requirements file and check their status
# Param $1: the virtualenv to check
# Param $2: requests MD5SUM update (defaults to false)
# __check_requirements_includes() {
# local requested_virtualenv="${1}"
# local update_md5="${2:-false}"
#
# # "pseudo private" function protection
# local allowed_callers=(
# 	'load_virtualenv'
# 	'__create_python_virtualenv'
# )
# 	if [[ ! " ${allowed_callers[*]} " =~ " ${FUNCNAME[1]} " ]]; then
# 		local log_msg="Function ${C_BOLD}'${FUNCNAME[0]}()'${C_NC} is ${C_BOLD}private${C_NC}.  You shouldn't invoke it!\n"
# 		log_msg+="\tUnexpectedly called from ${C_BOLD}'${FUNCNAME[1]}'${C_NC}."
# 		bme_log "${log_msg}" error
# 		return -1
# 	fi
#
# # running in a subshell so I securely can change directories
# # the function will implicitly return the subshell's output
# 	(
# 		cd "${virtualenvs_requirements}"
#
# 	# matches lines like:
# 	# -rpath
# 	# -r path
# 	# --requirement path
# 	# --requirement=path
# 		local include_list=$(
# 			grep --perl-regexp \
# 			     --ignore-case \
# 			     --only-matching \
# 			     '^((-r|--requirement)(=|[[:space:]])*)\K(.+)' \
# 			     ${requested_virtualenv}.requirements
# 		)
# 	# Checks found includes (if any)
# 		for include in ${include_list}; do
# 		# Real path holds the absolute path to the file to be included.
# 			local real_path=`realpath -qe "${include}"`
# 			local current_error=$?
# 			if [ $current_error -eq 0 ]; then
# 			# This checks if the md5sum currently recorded matches the current one
# 				if ! grep " ${real_path}$" "${virtualenvs_md5sums}" \
# 				     | md5sum --check --status > /dev/null 2>&1; then
# 					if ( $update_md5 ); then
# 					# ${real_path//\//\\/} escapes backslashes so sed is happy
# 						sed --in-place "/ ${real_path//\//\\/}/d" ${virtualenvs_md5sums}
# 						md5sum "${real_path}" >> "${virtualenvs_md5sums}"
# 						bme_log "md5sum for ${C_BOLD}'${real_path}'${C_NC} virtualenv collected." info 1
# 					else
# 					# wrong match, but only logging requested
# 						local log_msg="Virtualenv ${C_BOLD}'${real_path}'${C_NC} outdated.\n"
# 						log_msg+="\tIncluded from ${C_BOLD}'${requested_virtualenv}'${C_NC}."
# 						bme_log "${log_msg}" warning
# 					fi
# 				fi
# 			# ...except there's an error trying to find it!
# 			else
# 				local log_msg="Virtualenv ${C_BOLD}'${requested_virtualenv}'${C_NC}:\n"
# 				log_msg+="\tincluded file ${C_BOLD}'${include}'${C_NC} couldn't be accessed."
# 				log_msg+="\t'${current_error}'"
# 				bme_log "${log_msg}" error
# 			fi
# 		done
# 	)
# }
