# Meant to be sourced by 'magic-enviro'
# Adds support for Python3 virtualenvs

virtualenvs_requirements="${PROJECT_DIR}/python-virtualenvs"
virtualenvs_md5sums="${PROJECT_DIR}/${BME_HIDDEN_DIR}/python-virtualenvs.md5"

python3-virtualenvs_load() {
local python_version=''
# Checks Python3 availability
	# for some reason, Python sends --version output to STDERR instead of STDOUT
	if which python3 > /dev/null; then
		SYSTEM_PYTHON=`which python3`
	elif which python > /dev/null; then
		if [[ $(python --version 2>&1) =~ 'Python 3' ]]; then
			SYSTEM_PYTHON=`which python`
		else
			local log_msg="${C_BOLD}'python3-virtualenvs'${C_NC} not loaded.\n"
			log_msg+="\t\tNo valid Python3 executable found."
			bme_log "${log_msg}" error 1
			return -1
		fi
	else
		local log_msg="${C_BOLD}'python3-virtualenvs'${C_NC} not loaded.\n"
		log_msg+="\t\tNo valid Python executable found."
		bme_log "${log_msg}" error 1
		return -1
	fi
	
# Checks virtualenvwrapper availability and other requirements
	if hash workon 2>/dev/null; then
		# makes sure virtualenvs' directory for requirements files is in place
		if ! [[ -d "${virtualenvs_requirements}" ]]; then
			mkdir -p "${virtualenvs_requirements}/"
			bme_log "${C_BOLD}'${virtualenvs_requirements}/'${C_NC} created." info 1
		fi
		# Makes sure virtualenvs' md5sum file is in place
		if [ ! -r "${virtualenvs_md5sums}" ]; then
			touch "${virtualenvs_md5sums}"
			bme_log "File ${C_BOLD}'${virtualenvs_md5sums}'${C_NC} created." info 1
		fi
	else
		local log_msg="${C_BOLD}'python3-virtualenvs'${C_NC} not loaded.\n"
		log_msg+="\t\t${C_BOLD}virtualenvwrapper tool undetected${C_NC}.  You should install it for virtualenvs support."
		bme_log "${log_msg}" error 1
		return -1
	fi
	
# Final message
	local log_msg="${C_BOLD}'python3-virtualenvs'${C_NC} "
	log_msg+="(${C_BOLD}$(${SYSTEM_PYTHON} --version 2>&1)${C_NC}) "
	log_msg+="loaded."
	bme_log "${log_msg}" info 1
	
	bme_log "${C_BOLD}load_virtualenv 'venv_name'${C_NC} - Loads the Python virtualenv by name ${C_BOLD}'venv_name'${C_NC}." function 2
}


python3-virtualenvs_unload() {
	unset -f load_virtualenv
	unset SYSTEM_PYTHON
	unset virtualenvs_requirements
	unset virtualenvs_md5sums
	hash deactivate 2>/dev/null && deactivate  # deactivates virtualenv (if any active)
}


load_virtualenv() {
local requested_virtualenv="${1}"

# if requested virtualenv already exists, check if it's still valid
	if lsvirtualenv -b | grep -q ^${requested_virtualenv}$; then
		if ! grep "${virtualenvs_requirements}/${requested_virtualenv}.requirements" "${virtualenvs_md5sums}" | md5sum --check --status > /dev/null 2>&1; then
			bme_log "Virtualenv ${C_BOLD}'${requested_virtualenv}'${C_NC} outdated." warning
			hash deactivate 2>/dev/null && deactivate  # deactivates virtualenv (if any active and just in case)
			rmvirtualenv "${requested_virtualenv}"
		else
			workon ${requested_virtualenv}
			bme_log "${C_BOLD}'${requested_virtualenv}'${C_NC} virtualenv activated." info
			return 0
		fi
	fi
	
# if virtualenv doesn't exist...
	bme_log "Virtualenv ${C_BOLD}'${requested_virtualenv}'${C_NC} doesn't exist.  About to create it." info
	
	# not even a requirements file! let's create an empty one
	if ! [ -r "${virtualenvs_requirements}/${requested_virtualenv}.requirements" ]; then
		bme_log "Requirements file for virtualenv ${C_BOLD}'${virtualenvs_requirements}/${requested_virtualenv}.requirements'${C_NC} doesn't exist. Creating empty virtualenv." warning 1
		touch "${virtualenvs_requirements}/${requested_virtualenv}.requirements"
	fi
	
# virtualenv creation
local virtualenv_error=false
	# requirements file format can be picky about pip version.
	# when pip is referenced in requirements file, let's create the virtualenv in three steps:
	# 1. empty virtualenv
	# 2. install requested pip
	# 3. everything else
	local pip_found=$(
		# this first grep strips comments
		grep --only-matching '^[^#]*' "${virtualenvs_requirements}/${requested_virtualenv}.requirements" | \
		# this second one finds pip entries: '~|=|<|>' is the list of valid version-specifier characters
		grep --ignore-case --extended-regexp '^pip[[:space:]]*((~|=|<|>)|$)'
	)
	if [ ! -z "${pip_found}" ]; then
	# custom pip found in the requirements file
		bme_log "Custom pip version requested." info 1
		# 1. "empty" virtualenv (it also activates it)
		mkvirtualenv --python=${SYSTEM_PYTHON} ${requested_virtualenv} || virtualenv_error=true
		# 2. install pip
		pip install "${pip_found}" || virtualenv_error=true
		# 3. install the full requirements file
		pip install -r "${virtualenvs_requirements}/${requested_virtualenv}.requirements" || virtualenv_error=true
	else
	# no custom pip version: "standard" virtualenv creation
		mkvirtualenv --python=${SYSTEM_PYTHON} ${requested_virtualenv} -r "${virtualenvs_requirements}/${requested_virtualenv}.requirements" || virtualenv_error=true
	fi
	
	if ($virtualenv_error); then
		bme_log "${C_BOLD}'${requested_virtualenv}'${C_NC} creation FAILED (see above)." error
	else
		if ! grep "${virtualenvs_requirements}/${requested_virtualenv}.requirements" "${virtualenvs_md5sums}" | md5sum --check --status > /dev/null 2>&1; then
			sed --in-place "/\/${requested_virtualenv}.requirements/d" ${virtualenvs_md5sums}
			md5sum "${virtualenvs_requirements}/${requested_virtualenv}.requirements" >> "${virtualenvs_md5sums}"
			bme_log "md5sum for ${C_BOLD}'${requested_virtualenv}'${C_NC} virtualenv collected." info 1
		fi
		bme_log "${C_BOLD}'${requested_virtualenv}'${C_NC} virtualenv created." info
	fi
}
